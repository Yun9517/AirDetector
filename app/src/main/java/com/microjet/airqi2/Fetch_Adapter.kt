package com.microjet.airqi2import android.content.DialogInterfaceimport android.util.Logimport android.view.MotionEventimport android.view.Viewimport android.view.ViewGroupimport android.widget.BaseAdapterimport android.widget.LinearLayoutimport android.widget.TextViewimport java.text.SimpleDateFormatimport java.util.*class Fetch_Adapter (val time_list: ArrayList<String>,val list: ArrayList<String>, val context: FetchDataMain) : BaseAdapter() {    private val TAG = Fetch_Adapter::class.java.simpleName    override fun getCount(): Int {        return list.size    }    override fun getView(position: Int, convertView: View?, parent: ViewGroup?): View? {        var holder: DataViewHolder        var v: View        if (convertView == null) {            v = View.inflate(context, R.layout.fetch_adapter, null)            holder = DataViewHolder(v)            v.tag = holder        } else {            v = convertView            holder = v.tag as DataViewHolder        }        holder.str.text = list[position]        holder.str_time.text = time_list[position]        v.setOnTouchListener { v: View,m: MotionEvent ->            handleTouch(m)            true        }        return v    }    override fun getItem(position: Int): Any? {        return time_list.get(position)    }//    override fun getItemInfo(position: Int): Any? {//        return list.get(position)//    }    override fun getItemId(position: Int): Long {        return position.toLong()    }    inner class DataViewHolder(var viewItem: View) {        var str: TextView = viewItem.findViewById(R.id.facth_info_Date) as TextView        var str_time: TextView = viewItem.findViewById(R.id.facth_time_Date) as TextView    }    fun handleTouch(m: MotionEvent):Boolean    {        val pointerCount = m.pointerCount        for (i in 0 until pointerCount)        {            val x = m.getX(i)            val y = m.getY(i)            val id = m.getPointerId(i)            val action = m.actionMasked            val actionIndex = m.actionIndex            var actionString: String            when (action)            {                MotionEvent.ACTION_DOWN -> actionString = "DOWN"                MotionEvent.ACTION_UP -> actionString = "UP"                MotionEvent.ACTION_POINTER_DOWN -> actionString = "PNTR DOWN"                MotionEvent.ACTION_POINTER_UP -> actionString = "PNTR UP"                MotionEvent.ACTION_MOVE -> actionString = "MOVE"                MotionEvent.ACTION_MASK -> actionString = "MASK"                MotionEvent.ACTION_SCROLL -> actionString = "SCROLL"                MotionEvent.ACTION_HOVER_ENTER -> actionString = "HOVER_ENTER"                MotionEvent.ACTION_HOVER_MOVE -> actionString = "ACTION_HOVER_MOVE"                else -> actionString = ""            }            FetchDataMain.Touch_Time.Time = System.currentTimeMillis()            Log.d(TAG,"Touch  pointerCount "+  pointerCount)            Log.d(TAG,"Touch  date "+ FetchDataMain.Touch_Time.Time)        }        return true    }}